{"version":3,"sources":["resources/img/enemy/placeholder.png","components/Screen.js","components/MainScreen.js","components/ShopScreen.js","components/Menu.js","components/EnemyStats.js","components/EnemyImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Screen","props","name","className","this","children","React","Component","MainScreen","isVisible","ShopScreen","state","coinCount","emeraldCount","currentCoinCount","currentEmeraldCount","setState","Menu","menuItems","items","item","push","onClick","key","EnemyStats","enemyHP","value","max","enemyName","enemyKilled","onKill","amount","prevState","Object","assign","console","log","enemyHPwidth","style","width","EnemyImage","image","require","changeImage","path","src","alt","draggable","App","dpc","dps","shopOpen","enemyStats","createRef","enemyImage","shopScreen","ref","current","addEnemyHP","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.49c857cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.9d36674e.png\";","import React from 'react';\r\nimport './Screen.css';\r\n\r\nclass Screen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = this.props.name;\r\n        this.className = \"\";\r\n    }\r\n    \r\n    /* toggleVisibility(state) {\r\n        if (state !== undefined) {\r\n            if (state) {\r\n                this.isVisible = true;\r\n            } else {\r\n                this.isVisible = false;\r\n            }\r\n        } else {\r\n            if (this.isVisible) {\r\n                this.isVisible = false;\r\n            } else {\r\n                this.isVisible = true;\r\n            }\r\n        }\r\n        this.forceUpdate()\r\n    }\r\n\r\n    getVisibility() {\r\n        return(this.isVisible);\r\n    } */\r\n    \r\n    render() {\r\n        /* if (this.isVisible) {\r\n            this.className = this.className.replace(\" hidden\", \"\");\r\n        } else {\r\n            this.className += \" hidden\";\r\n        } */\r\n        return(\r\n            <div className={\"Screen \" + this.className}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Screen;","import Screen from './Screen';\r\nimport './MainScreen.css';\r\n\r\nclass MainScreen extends Screen {\r\n    constructor(props) {\r\n        super(props);\r\n        this.className = \"MainScreen\";\r\n        this.isVisible = true;\r\n    }\r\n}\r\n\r\nexport default MainScreen;","import Screen from './Screen';\r\nimport React from 'react';\r\nimport './ShopScreen.css';\r\n\r\nclass ShopScreen extends Screen {\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = \"Shop\";\r\n        this.className = \"ShopScreen\";\r\n        this.currentCoinCount = props.currentCoinCount;\r\n        this.currentEmeraldCount = props.currentEmeraldCount;\r\n    }\r\n\r\n    state = {\r\n        coinCount: 0,\r\n        emeraldCount: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({coinCount: this.currentCoinCount, emeraldCount: this.currentEmeraldCount})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"Screen \" + this.className}>\r\n                <div className=\"TopBar\">\r\n                    <p className=\"ScreenName\">Shop</p>\r\n                    <div className=\"VerticalAlign\">\r\n                        <div>\r\n                            <p>Coins: {this.state.coinCount}</p>\r\n                            <p>Emeralds: {this.state.emeraldCount}</p>\r\n                        </div>\r\n                        <div>\r\n                            <button>Characters</button>\r\n                            <button>Weapons</button>\r\n                            <button>Artifacts</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShopScreen;","import React from 'react';\r\nimport \"./Menu.css\";\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.menuItems = props.menuItems\r\n    }\r\n    render() {\r\n        let items = []\r\n        for (var item in this.menuItems) {\r\n            items.push(<button onClick={this.menuItems[item].onClick} key={this.menuItems[item].name}>{this.menuItems[item].name}</button>)\r\n        }\r\n        return (\r\n            <div className=\"Menu\">\r\n                {items}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport './EnemyStats.css';\r\n\r\nclass EnemyStats extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onKill = props.onKill;\r\n    }\r\n\r\n    state = {\r\n        enemyHP: {\r\n            value: 20,\r\n            max: 20\r\n        },\r\n        enemyName: 'Name',\r\n        enemyKilled: false\r\n    }\r\n\r\n    addEnemyHP(amount) {\r\n        this.setState(prevState => {\r\n            let enemyHP = Object.assign({}, prevState.enemyHP);\r\n            let enemyKilled = false;\r\n            enemyHP.value += amount;\r\n            if (enemyHP.value <= 0) {\r\n                enemyHP.value = enemyHP.max;\r\n                enemyKilled = true;\r\n            }\r\n            return {enemyHP, enemyKilled};\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.enemyKilled) {\r\n            console.log('Enemy got killed!')\r\n            this.onKill();   \r\n            this.setState({enemyKilled: false})\r\n        }\r\n    }\r\n\r\n    getEnemyHP() {\r\n        return this.state.enemyHP;\r\n    }\r\n\r\n    setEnemyName(name) {\r\n        this.setState({\r\n            enemyName: name\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var enemyHPwidth = 0;\r\n        enemyHPwidth = ((this.state.enemyHP.value / this.state.enemyHP.max) * 100) + '%';\r\n\r\n        return(\r\n            <div className=\"EnemyStats\">\r\n                <p>{this.state.enemyName}</p>\r\n                <div className=\"EnemyHP\">\r\n                    <div style={{width: enemyHPwidth}} />\r\n                    <p>{this.state.enemyHP.value} / {this.state.enemyHP.max}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnemyStats;","import React from 'react';\r\nimport './EnemyImage.css';\r\n\r\nclass EnemyImage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = props.onClick;\r\n    }\r\n\r\n    state = {\r\n        image: require('../resources/img/enemy/placeholder.png')\r\n    }\r\n\r\n    changeImage = (path) => {\r\n        this.setState({\r\n            image: path\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"EnemyImage\" onClick={this.onClick}>\r\n                <img src={this.state.image} alt={this.state.image} draggable={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnemyImage;","import React from 'react';\nimport './App.css';\n\n// Screens\nimport MainScreen from './components/MainScreen';\nimport ShopScreen from './components/ShopScreen';\n\n// Game navigation\nimport Menu from './components/Menu';\n\n// Enemy status for main screen\nimport EnemyStats from './components/EnemyStats';\nimport EnemyImage from './components/EnemyImage';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.enemyStats = React.createRef();\n        this.enemyImage = React.createRef();\n        this.shopScreen = React.createRef();\n    }\n\n    state = {\n        dpc: 1,\n        dps: 0,\n        coinCount: 0,\n        emeraldCount: 0,\n        shopOpen: false\n    }\n\n    onKill = () => {\n        this.setState({coinCount: this.state.coinCount + 1})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Menu menuItems={[\n                {\n                    name: '-D',\n                    onClick: () => {\n                        this.setState({dpc: this.state.dpc - 1})\n                    }\n                },\n                {\n                    name: '+D',\n                    onClick: () => {\n                        this.setState({dpc: this.state.dpc + 1})\n                    }\n                },\n                {\n                    name: 'S',\n                    onClick: () => {\n                        this.setState({shopOpen: !this.state.shopOpen})\n                    }\n                },\n                {\n                    name: 'C',\n                    onClick: () => {\n                        this.setState({coinCount: this.state.coinCount + 1})\n                    }\n                }\n                ]} />\n                <MainScreen>\n                    <EnemyStats ref={this.enemyStats} onKill={this.onKill} />\n                    <EnemyImage ref={this.enemyImage} onClick={() => {\n                        this.enemyStats.current.addEnemyHP(-this.state.dpc);\n                    }} />\n                </MainScreen>\n                {\n                    this.state.shopOpen ?\n                    <ShopScreen currentCoinCount={this.state.coinCount} currentEmeraldCount={this.state.emeraldCount} />\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}